Pointer Fundamentals Summary 
(خلاصه اساسیات اشاره‌گرها)

1. What is a Pointer? (اشاره‌گر چیست؟)

A variable storing a memory address 
(متغیری که یک آدرس حافظه را ذخیره می‌کند)

Not the data itself, but where the data lives 
(خود داده نیست، بلکه محل قرارگیری داده است)

2. Pointer Operations (عملیات اشاره‌گر)

&variable: Gets memory address 
(آدرس حافظه را به دست می‌آورد)

*pointer: Dereferences pointer 
(اشاره‌گر را مقداردهی می‌کند)

pointer + n: Moves n elements forward
(n عنصر به جلو حرکت می‌کند)

3. Pointer Rules (قوانین اشاره‌گر)

Must initialize before use 
(باید قبل از استفاده مقداردهی شود)

Check for null before dereferencing
(قبل از مقداردهی برای null بررسی کنید)

Every new needs matching delete 
(هر new نیاز به delete متناظر دارد)

4. Common Mistakes (اشتباهات رایج)

Dangling pointers: Using pointer after memory freed 
(استفاده از اشاره‌گر پس از آزادسازی حافظه)

Memory leaks: Forgetting delete 
(فراموشی delete)

Null pointer dereference: Accessing *nullptr 
(دسترسی به *nullptr)

Double delete: Deleting same memory twice 
(دو بار حذف کردن حافظه یکسان)

5. When to Use Pointers (چه زمانی از اشاره‌گرها استفاده کنیم)

When you need dynamic memory allocation
(وقتی نیاز به تخصیص حافظه پویا دارید)

When you need to modify caller's variables 
(وقتی نیاز به تغییر متغیرهای فراخواننده دارید)

When implementing data structures 
(وقتی در پیاده‌سازی ساختارهای داده هستید)

6. Pointers vs References
(اشاره‌گرها در مقابل مرجع‌ها)

Pointers: Can be null, can be reassigned, support pointer arithmetic
(می‌توانند null باشند، می‌توانند مجدداً تخصیص یابند، از حساب اشاره‌گر پشتیبانی می‌کنند)

References: Cannot be null, cannot be reassigned, no pointer arithmetic 
(نمی‌توانند null باشند، نمی‌توانند مجدداً تخصیص یابند، بدون حساب اشاره‌گر)


Understanding pointers is crucial for mastering C++ - they provide direct memory access, 
enable dynamic data structures,
and form the basis for many advanced features.
Take your time with these concepts - they're challenging but essential!
(درک اشاره‌گرها برای تسلط بر سی‌پلاس‌پلاس حیاتی است - آنها دسترسی مستقیم به حافظه را فراهم می‌کنند،
ساختارهای داده پویا را فعال می‌کنند و پایه بسیاری از ویژگی‌های پیشرفته هستند.
زمان خود را با این مفاهیم بگذارید - آنها چالش‌برانگیز اما ضروری هستند!)